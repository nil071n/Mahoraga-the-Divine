local triggerAnimationId = 11365563255 -- Animation ID that triggers the new animation and movement
local newAnimationId = 17862993552 -- The animation to be played (looped)
local forwardSpeed = 15 -- Speed of the forward movement

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local rootPart = character:WaitForChild("HumanoidRootPart") -- Root part used for moving the player
local userInputService = game:GetService("UserInputService")
local mouse = player:GetMouse() -- Get the player's mouse

local isMovingForward = false -- To track forward movement

-- Function to rotate the player towards the mouse position
local function rotateTowardsMouse()
    local mousePosition = mouse.Hit.p -- Get the 3D position of the mouse in the world
    local rootPosition = rootPart.Position -- Get the current position of the player's root part

    -- Calculate the direction vector from the player to the mouse position (ignore Y axis to stay level)
    local direction = Vector3.new(mousePosition.X - rootPosition.X, 0, mousePosition.Z - rootPosition.Z).unit

    -- Set the player's rotation to face the mouse direction
    rootPart.CFrame = CFrame.new(rootPosition, rootPosition + direction)
end

-- Function to handle the animation being played
local function onAnimationPlayed(animationTrack)
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. triggerAnimationId then
        -- Stop any playing animations first
        for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end
        
        -- Create and load the new animation (looped)
        local newAnim = Instance.new("Animation")
        newAnim.AnimationId = "rbxassetid://" .. newAnimationId
        local newAnimTrack = humanoid:LoadAnimation(newAnim)
        newAnimTrack.Looped = true -- Set animation to loop
        newAnimTrack:Play()
        newAnimTrack:AdjustSpeed(1)

        -- Move and rotate the player
        local moveConnection
        moveConnection = game:GetService("RunService").RenderStepped:Connect(function(deltaTime)
            -- Rotate towards the mouse
            rotateTowardsMouse()

            -- Move the player forward in the direction they are facing (LookVector)
            if isMovingForward then
                local lookDirection = rootPart.CFrame.LookVector -- Get the forward direction of the player
                rootPart.CFrame = rootPart.CFrame + (lookDirection * forwardSpeed * deltaTime)
            end
        end)

        -- Stop the movement if the animation stops
        newAnimTrack.Stopped:Connect(function()
            if moveConnection then
                moveConnection:Disconnect() -- Stop moving when the animation is stopped
            end
        end)
    end
end

-- Toggle forward movement on key press (W or Up arrow)
userInputService.InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.W or input.KeyCode == Enum.KeyCode.Up then
        isMovingForward = true
    end
end)

-- Stop forward movement when the key is released
userInputService.InputEnded:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.W or input.KeyCode == Enum.KeyCode.Up then
        isMovingForward = false
    end
end)

-- Connect the onAnimationPlayed function to the AnimationPlayed event
humanoid.AnimationPlayed:Connect(onAnimationPlayed)





-- Settings for accessory equip time and accessory IDs
getgenv().Time = 1.5

getgenv().Head = {
    15483986158,  -- Accessory IDs for the head
    15483978392,
    15375507153,
}

getgenv().Torso = {
    15483986158,  -- Accessory IDs for the torso
    15765107116,
}

-- Animation ID to trigger accessory change
local animationId = "rbxassetid://17862993552"

-- Get the player object
local Players = game:GetService("Players")
local player = Players.LocalPlayer

-- Function to weld parts together
local function weldParts(part0, part1, c0, c1)
    local weld = Instance.new("Weld")
    weld.Part0 = part0
    weld.Part1 = part1
    weld.C0 = c0
    weld.C1 = c1
    weld.Parent = part0
    return weld
end

-- Function to find an attachment by name in a part
local function findAttachment(rootPart, name)
    for _, descendant in pairs(rootPart:GetDescendants()) do
        if descendant:IsA("Attachment") and descendant.Name == name then
            return descendant
        end
    end
end

-- Function to add an accessory to the character
local function addAccessoryToCharacter(accessoryId, parentPart)
    local success, accessory = pcall(function()
        return game:GetObjects("rbxassetid://" .. tostring(accessoryId))[1]
    end)

    -- Check if the accessory loaded properly
    if not success or not accessory then
        warn("Accessory with ID " .. tostring(accessoryId) .. " failed to load.")
        return
    end

    -- Parent the accessory to Workspace first
    accessory.Parent = game.Workspace

    local handle = accessory:FindFirstChild("Handle")
    if handle then
        handle.CanCollide = false
        local attachment = handle:FindFirstChildOfClass("Attachment")
        if attachment then
            local parentAttachment = findAttachment(parentPart, attachment.Name)
            if parentAttachment then
                weldParts(parentPart, handle, parentAttachment.CFrame, attachment.CFrame)
            end
        else
            -- If there's no attachment, weld it directly to the part
            local parent = player.Character:FindFirstChild(parentPart.Name)
            if parent then
                local attachmentPoint = accessory.AttachmentPoint
                weldParts(parent, handle, CFrame.new(0, 0.5, 0), attachmentPoint.CFrame)
            end
        end
    end

    -- Parent the accessory to the character
    accessory.Parent = player.Character
end

-- Function to remove existing accessories from the character
local function removeExistingAccessories(character)
    for _, accessory in ipairs(character:GetChildren()) do
        if accessory:IsA("Accessory") then
            accessory:Destroy()  -- Remove the accessory
        end
    end
end

-- Function to set the character's skin color to white
local function setSkinColor(character)
    local bodyColors = character:FindFirstChildOfClass("BodyColors")
    if bodyColors then
        bodyColors.HeadColor = BrickColor.White()
        bodyColors.TorsoColor = BrickColor.White()
        bodyColors.LeftArmColor = BrickColor.White()
        bodyColors.RightArmColor = BrickColor.White()
        bodyColors.LeftLegColor = BrickColor.White()
        bodyColors.RightLegColor = BrickColor.White()
    end
end

-- Function to apply changes when the correct animation is played
local function applyNewAvatar(character)
    wait(getgenv().Time)

    removeExistingAccessories(character)  -- Remove any existing accessories
    setSkinColor(character)  -- Set the character's skin color to white

    -- Add head accessories
    for _, accessoryId in ipairs(getgenv().Head) do
        addAccessoryToCharacter(accessoryId, character:FindFirstChild("Head"))
    end

    -- Add torso accessories
    local torso = character:FindFirstChild("UpperTorso") or character:FindFirstChild("Torso")
    if torso then
        for _, accessoryId in ipairs(getgenv().Torso) do
            addAccessoryToCharacter(accessoryId, torso)
        end
    end
end

-- Function to handle when an animation is played
local function onAnimationPlayed(animationTrack)
    -- Check if the animation matches the one we want
    if animationTrack.Animation.AnimationId == animationId then
        -- Apply the new avatar when the correct animation plays
        applyNewAvatar(player.Character)
    end
end

-- Function to handle player death
local function onCharacterDied()
    local character = player.Character
    if character then
        removeExistingAccessories(character)  -- Remove all accessories on death
    end
end

-- Function to handle character respawn
local function onCharacterAdded(character)
    local humanoid = character:WaitForChild("Humanoid")
    
    -- Monitor animations played on the character's humanoid
    humanoid.AnimationPlayed:Connect(onAnimationPlayed)

    -- Connect death event
    humanoid.Died:Connect(onCharacterDied)
end

-- Initial connection for when the script runs
if player.Character then
    onCharacterAdded(player.Character)
end

-- Listen for when the player's character respawns
player.CharacterAdded:Connect(function(character)
    onCharacterAdded(character)
end)





-- LocalScript to trigger a chat message when a specific animation is played
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

-- Animation ID to listen for
local animationId = 17862993552
local animationTriggered = false

-- Reference to the chat system
local chatrem = game.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest

-- Function to send a chat message
local function sendMessage()
    chatrem:FireServer('With this treasure, I summon Eight-Handled Sword Divergent Sila Divine General Mahoraga', "All")
    print("Sent Message")
end

-- Function to handle animation playing
local function onAnimationPlayed(animationTrack)
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId and not animationTriggered then
        animationTriggered = true  -- Ensure the message is sent only once per animation trigger
        sendMessage()
    end
end

-- Connect to the Humanoid's AnimationPlayed event
humanoid.AnimationPlayed:Connect(onAnimationPlayed)

-- To handle the case when the character respawns
player.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    humanoid = character:WaitForChild("Humanoid")
    animationTriggered = false  -- Reset the trigger flag

    humanoid.AnimationPlayed:Connect(onAnimationPlayed)  -- Reconnect the event
end)







local Players = game:GetService("Players")
local player = Players.LocalPlayer
local respawnOnce = true  -- This will ensure the player only respawns at the death position once.

-- Function to handle player respawn at death position
local function onCharacterDied()
    local character = player.Character
    if character then
        -- Save the position where the player died
        local deathPosition = character:FindFirstChild("HumanoidRootPart").Position

        -- Wait for the character to respawn
        player.CharacterAdded:Wait()
        if respawnOnce then
            -- Set the new character's position to the death position
            player.Character:WaitForChild("HumanoidRootPart").CFrame = CFrame.new(deathPosition)
            respawnOnce = false  -- Make sure this only happens once
        end
    end
end

-- Connect the death event to handle when the player dies
local function onCharacterAdded(character)
    local humanoid = character:WaitForChild("Humanoid")
    humanoid.Died:Connect(onCharacterDied)
end

-- Initial connection for when the script runs
if player.Character then
    onCharacterAdded(player.Character)
end
player.CharacterAdded:Connect(onCharacterAdded)




local player = game.Players.LocalPlayer
 
local playerGui = player.PlayerGui
 
local hotbar = playerGui:FindFirstChild("Hotbar")
 
local backpack = hotbar:FindFirstChild("Backpack")
 
local hotbarFrame = backpack:FindFirstChild("Hotbar")
 
local baseButton = hotbarFrame:FindFirstChild("1").Base
 
local ToolName = baseButton.ToolName
 
 
ToolName.Text = "《Heavenly Strike》"
 
 
local player = game.Players.LocalPlayer
 
local playerGui = player.PlayerGui
 
local hotbar = playerGui:FindFirstChild("Hotbar")
 
local backpack = hotbar:FindFirstChild("Backpack")
 
local hotbarFrame = backpack:FindFirstChild("Hotbar")
 
local baseButton = hotbarFrame:FindFirstChild("2").Base
 
local ToolName = baseButton.ToolName
 
 
ToolName.Text = "《Heavy Barrage》"
 
 
local player = game.Players.LocalPlayer
 
local playerGui = player.PlayerGui
 
local hotbar = playerGui:FindFirstChild("Hotbar")
 
local backpack = hotbar:FindFirstChild("Backpack")
 
local hotbarFrame = backpack:FindFirstChild("Hotbar")
 
local baseButton = hotbarFrame:FindFirstChild("3").Base
 
local ToolName = baseButton.ToolName
 
 
ToolName.Text = "《Close Combat》"
 
 
local player = game.Players.LocalPlayer
 
local playerGui = player.PlayerGui
 
local hotbar = playerGui:FindFirstChild("Hotbar")
 
local backpack = hotbar:FindFirstChild("Backpack")
 
local hotbarFrame = backpack:FindFirstChild("Hotbar")
 
local baseButton = hotbarFrame:FindFirstChild("4").Base
 
local ToolName = baseButton.ToolName
 
 
ToolName.Text = "《Ground Break》"
 
 
rs = game:GetService("Players")
 
local player = Players.LocalPlayer
 
local playerGui = player:WaitForChild("PlayerGui")
 local Playe
 
local function findGuiAndSetText()
 
    local screenGui = playerGui:FindFirstChild("ScreenGui")
 
    if screenGui then
 
        local magicHealthFrame = screenGui:FindFirstChild("MagicHealth")
 
        if magicHealthFrame then
 
            local textLabel = magicHealthFrame:FindFirstChild("TextLabel")
 
            if textLabel then
 
                textLabel.Text = "Eight-Handled Sword Divergent Sila Divine General Mahoraga"
 
            end
 
        end
 
    end
 
end
 
 
playerGui.DescendantAdded:Connect(findGuiAndSetText)
 
findGuiAndSetText()
 
--[[Animations]]
 
--[[Move 1]]
 
local animationId = 10468665991
 
 
local player = game.Players.LocalPlayer
 
local character = player.Character or player.CharacterAdded:Wait()
 
local humanoid = character:WaitForChild("Humanoid")
 
 
local function onAnimationPlayed(animationTrack)
 
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
 
 
local p = game.Players.LocalPlayer
 
local Humanoid = p.Character:WaitForChild("Humanoid")
 
 
for _, animTrack in pairs(Humanoid:GetPlayingAnimationTracks()) do
 
    animTrack:Stop()
 
end
 
 
local AnimAnim = Instance.new("Animation")
 
AnimAnim.AnimationId = "rbxassetid://18896127525"
 
local Anim = Humanoid:LoadAnimation(AnimAnim)
 
 
local startTime = 0
 
 
Anim:Play()

Anim:AdjustSpeed(0.8)
 
Anim.TimePosition = startTime
 
Anim:AdjustSpeed(0.8)

delay(1.2, function()
 
    Anim:Stop()

end)


    end
 
end
 
--[[END OF MOVE 1 ANIM]]
 
--[[Move 2]]
 
 
humanoid.AnimationPlayed:Connect(onAnimationPlayed)
 
 
local animationId = 10466974800
 
 
local player = game.Players.LocalPlayer
 
local character = player.Character or player.CharacterAdded:Wait()
 
local humanoid = character:WaitForChild("Humanoid")
 
 
local function onAnimationPlayed(animationTrack)
 
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
 
 
local p = game.Players.LocalPlayer
 
local Humanoid = p.Character:WaitForChild("Humanoid")
 
 
for _, animTrack in pairs(Humanoid:GetPlayingAnimationTracks()) do
 
    animTrack:Stop()
 
end
 
 
local AnimAnim = Instance.new("Animation")
 
AnimAnim.AnimationId = "rbxassetid://15090734317"
 
local Anim = Humanoid:LoadAnimation(AnimAnim)
 
 
local startTime = 0
 
 
Anim:Play()
 
Anim:AdjustSpeed(1)
 
Anim.TimePosition = startTime
 
Anim:AdjustSpeed(0.5)

 
Anim.TimePosition = startTime
 
Anim:AdjustSpeed(0.5)

delay(1.8, function()
 
    Anim:Stop()

end)
 
 
    end
 
end
 
--[[END OF MOVE 2 ANIM]]
 
--[[Move 3]]
 
 
humanoid.AnimationPlayed:Connect(onAnimationPlayed)
 
 
local animationId = 10471336737
 
 
local player = game.Players.LocalPlayer
 
local character = player.Character or player.CharacterAdded:Wait()
 
local humanoid = character:WaitForChild("Humanoid")
 
 
local function onAnimationPlayed(animationTrack)
 
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
 
 
local p = game.Players.LocalPlayer
 
local Humanoid = p.Character:WaitForChild("Humanoid")
 
 
for _, animTrack in pairs(Humanoid:GetPlayingAnimationTracks()) do
 
    animTrack:Stop()
 
end
 
 
local AnimAnim = Instance.new("Animation")
 
AnimAnim.AnimationId = "rbxassetid://17838619895"
 
local Anim = Humanoid:LoadAnimation(AnimAnim)
 
 
local startTime = 0.3
 
 
Anim:Play()
 
Anim:AdjustSpeed(0.8)
 
Anim.TimePosition = startTime
 
Anim:AdjustSpeed(0.8)
 
 
delay(1.8, function()
 
    Anim:Stop()
 
end)
 
 
    end
 
end
 
--[[END OF MOVE 3 ANIM]]
 
--[[Move 4]]
 
 
humanoid.AnimationPlayed:Connect(onAnimationPlayed)
 
 
local animationId = 12510170988
 
 
local player = game.Players.LocalPlayer
 
local character = player.Character or player.CharacterAdded:Wait()
 
local humanoid = character:WaitForChild("Humanoid")
 
 
local function onAnimationPlayed(animationTrack)
 
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
 
local p = game.Players.LocalPlayer
 
local Humanoid = p.Character:WaitForChild("Humanoid")
 
 
for _, animTrack in pairs(Humanoid:GetPlayingAnimationTracks()) do
 
    animTrack:Stop()
 
end
 
 
local AnimAnim = Instance.new("Animation")
 
AnimAnim.AnimationId = "rbxassetid://18897119503"
 
local Anim = Humanoid:LoadAnimation(AnimAnim)
 
 
local startTime = 0
 
 
Anim:Play()
 
Anim:AdjustSpeed(1)
 
Anim.TimePosition = startTime
 
Anim:AdjustSpeed(1)
 
 
    end
 
end
 
--[[END OF MOVE 4 ANIM]]
 
--[[Wall combo]]
 
humanoid.AnimationPlayed:Connect(onAnimationPlayed)
 
local animationId = 15955393872
 
 
local player = game.Players.LocalPlayer
 
local character = player.Character or player.CharacterAdded:Wait()
 
local humanoid = character:WaitForChild("Humanoid")
 
 
local function onAnimationPlayed(animationTrack)
 
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
 
local p = game.Players.LocalPlayer
 
local Humanoid = p.Character:WaitForChild("Humanoid")
 
 
for _, animTrack in pairs(Humanoid:GetPlayingAnimationTracks()) do
 
    animTrack:Stop()
 
end
 
 
local AnimAnim = Instance.new("Animation")
 
AnimAnim.AnimationId = "rbxassetid://15943915877"
 
local Anim = Humanoid:LoadAnimation(AnimAnim)
 
 
local startTime = 0.05
 
 
Anim:Play()
 
Anim:AdjustSpeed(0)
 
Anim.TimePosition = startTime
 
Anim:AdjustSpeed(1)
 
 
    end
 
end
 
--[[END OF WALL COMBO ANIM]]
 
--[[Ult Activation]]
 
humanoid.AnimationPlayed:Connect(onAnimationPlayed)
 
 
local animationId = 12447707844
 
 
local player = game.Players.LocalPlayer
 
local character = player.Character or player.CharacterAdded:Wait()
 
local humanoid = character:WaitForChild("Humanoid")
 
 
local function onAnimationPlayed(animationTrack)
 
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
 
local p = game.Players.LocalPlayer
 
local Humanoid = p.Character:WaitForChild("Humanoid")
 
 
for _, animTrack in pairs(Humanoid:GetPlayingAnimationTracks()) do
 
    animTrack:Stop()
 
end
 
 
local AnimAnim = Instance.new("Animation")
 
AnimAnim.AnimationId = "rbxassetid://17862993552"
 
local Anim = Humanoid:LoadAnimation(AnimAnim)
 
 
local startTime = 0
 
 
Anim:Play()
 
Anim:AdjustSpeed(0)
 
Anim.TimePosition = startTime
 
Anim:AdjustSpeed(1)

delay(3, function()
 
    Anim:Stop()
 
end)
 
    end
 
end
--[[END OF ULT ACTIVATION ANIM]]
 
--[[Dash]]
 
humanoid.AnimationPlayed:Connect(onAnimationPlayed)
 
 
local animationId = 10479335397
 
 
local player = game.Players.LocalPlayer
 
local character = player.Character or player.CharacterAdded:Wait()
 
local humanoid = character:WaitForChild("Humanoid")
 
 
local function onAnimationPlayed(animationTrack)
 
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
 
local p = game.Players.LocalPlayer
 
local Humanoid = p.Character:WaitForChild("Humanoid")
 
 
for _, animTrack in pairs(Humanoid:GetPlayingAnimationTracks()) do
 
    animTrack:Stop()
 
    end 
 
local AnimAnim = Instance.new("Animation")
 
AnimAnim.AnimationId = "rbxassetid://10479335397"
 
local Anim = Humanoid:LoadAnimation(AnimAnim)
 
 
local startTime = 0
 
 
Anim:Play()
 
Anim:AdjustSpeed(0.5)
 
Anim.TimePosition = startTime
 
Anim:AdjustSpeed(0.5)
 
 
delay(1.8, function()
 
    Anim:Stop()
 
end)
 
 
    end
 
end
 
--[[END OF DASH ANIM]]
 
--[[Uppercut]]
humanoid.AnimationPlayed:Connect(onAnimationPlayed)
 
 
local animationId = 10503381238
 
 
local player = game.Players.LocalPlayer
 
local character = player.Character or player.CharacterAdded:Wait()
 
local humanoid = character:WaitForChild("Humanoid")
 
 
local function onAnimationPlayed(animationTrack)
 
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
 
local p = game.Players.LocalPlayer
 
local Humanoid = p.Character:WaitForChild("Humanoid")
 
 
for _, animTrack in pairs(Humanoid:GetPlayingAnimationTracks()) do
 
    animTrack:Stop()
 
end
 
 
local AnimAnim = Instance.new("Animation")
 
AnimAnim.AnimationId = "rbxassetid://14900168720"
 
local Anim = Humanoid:LoadAnimation(AnimAnim)
 
 
local startTime = 1.3
 
 
Anim:Play()
 
Anim:AdjustSpeed(0)
 
Anim.TimePosition = startTime
 
Anim:AdjustSpeed(0.7)
 
 
    end
 
end
 
--[[END OF UPPERCUT ANIM]]
 
--[[Downslam]]
 
humanoid.AnimationPlayed:Connect(onAnimationPlayed)
 
 
local animationId = 10470104242
 
 
local player = game.Players.LocalPlayer
 
local character = player.Character or player.CharacterAdded:Wait()
 
local humanoid = character:WaitForChild("Humanoid")
 
 
local function onAnimationPlayed(animationTrack)
 
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
 
local p = game.Players.LocalPlayer
 
local Humanoid = p.Character:WaitForChild("Humanoid")
 
 
for _, animTrack in pairs(Humanoid:GetPlayingAnimationTracks()) do
 
    animTrack:Stop()
 
end
 
 
local AnimAnim = Instance.new("Animation")
 
AnimAnim.AnimationId = "rbxassetid://17120966975"
 
local Anim = Humanoid:LoadAnimation(AnimAnim)
 
 
local startTime = 0
 
 
wait(0)
 
Anim:Play()
 
Anim:AdjustSpeed(2)
 
Anim.TimePosition = startTime
 
Anim:AdjustSpeed(2)
 
 
    end
 
end
 
--[[END OF DOWNSLAM ANIM]]
 
--[[Punch anims]]
 
humanoid.AnimationPlayed:Connect(onAnimationPlayed)
 
 
local Players = game:GetService("Players")
 
local player = Players.LocalPlayer
 
local character = player.Character or player.CharacterAdded:Wait()
 
local humanoid = character:WaitForChild("Humanoid")
 
 
local animationIdsToStop = {
 
    [17859015788] = true, --punch idk
 
    [10469493270] = true, --punch1
 
    [10469630950] = true, --punch2
 
    [10469639222] = true, --punch3
 
    [10469643643] = true, --punch4
 
}
 
 
local replacementAnimations = {
 
    ["10469493270"] = "rbxassetid://17889458563", --punch1
 
    ["10469630950"] = "rbxassetid://17889461810", --punch2
 
    ["10469639222"] = "rbxassetid://17889471098", --punch3
 
    ["10469643643"] = "rbxassetid://17889290569", --punch4
 
    ["17859015788"] = "rbxassetid://12684185971", --punch idk
 
    ["11365563255"] = "rbxassetid://14516273501" --punch idk
 
}
 
 
local queue = {}
 
local isAnimating = false
 
 
local function playReplacementAnimation(animationId)
 
    if isAnimating then
 
        table.insert(queue, animationId)
 
        return
 
    end
 
   
 
    isAnimating = true
 
    local replacementAnimationId = replacementAnimations[tostring(animationId)]
 
    if replacementAnimationId then
 
        local AnimAnim = Instance.new("Animation")
 
        AnimAnim.AnimationId = replacementAnimationId
 
        local Anim = humanoid:LoadAnimation(AnimAnim)
 
        Anim:Play()
 
       
 
        Anim.Stopped:Connect(function()
 
            isAnimating = false
 
            if #queue > 0 then
 
                local nextAnimationId = table.remove(queue, 1)
 
                playReplacementAnimation(nextAnimationId)
 
            end
 
        end)
 
    else
 
        isAnimating = false
 
    end
 
end
 
 
local function stopSpecificAnimations()
 
    for _, track in ipairs(humanoid:GetPlayingAnimationTracks()) do
 
        local animationId = tonumber(track.Animation.AnimationId:match("%d+"))
 
        if animationIdsToStop[animationId] then
 
            track:Stop()
 
        end
 
    end
 
end
 
 
local function onAnimationPlayed(animationTrack)
 
    local animationId = tonumber(animationTrack.Animation.AnimationId:match("%d+"))
 
    if animationIdsToStop[animationId] then
 
        stopSpecificAnimations()
 
        animationTrack:Stop()
 
       
 
        local replacementAnimationId = replacementAnimations[tostring(animationId)]
 
        if replacementAnimationId then
 
            playReplacementAnimation(animationId)
 
        end
 
    end
 
end
 
 
humanoid.AnimationPlayed:Connect(onAnimationPlayed)
 
 
local player = game.Players.LocalPlayer
 
local character = player.Character or player.CharacterAdded:Wait()
 
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
 
 
local function onBodyVelocityAdded(bodyVelocity)
 
    if bodyVelocity:IsA("BodyVelocity") then
 
        bodyVelocity.Velocity = Vector3.new(bodyVelocity.Velocity.X, 0, bodyVelocity.Velocity.Z)
 
    end
 
end
 
 
character.DescendantAdded:Connect(onBodyVelocityAdded)
 
 
for _, descendant in pairs(character:GetDescendants()) do
 
    onBodyVelocityAdded(descendant)
 
end
 
 
player.CharacterAdded:Connect(function(newCharacter)
 
    character = newCharacter
 
    humanoidRootPart = character:WaitForChild("HumanoidRootPart")
 
    character.DescendantAdded:Connect(onBodyVelocityAdded)
 
   
 
    for _, descendant in pairs(character:GetDescendants()) do
 
        onBodyVelocityAdded(descendant)
 
    end
 
end) 
